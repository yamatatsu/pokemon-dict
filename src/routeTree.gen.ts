/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as SpeciesIndexImport } from './routes/species.index'
import { Route as SpeciesSpecieIdImport } from './routes/species.$specieId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SpeciesIndexRoute = SpeciesIndexImport.update({
  id: '/species/',
  path: '/species/',
  getParentRoute: () => rootRoute,
} as any)

const SpeciesSpecieIdRoute = SpeciesSpecieIdImport.update({
  id: '/species/$specieId',
  path: '/species/$specieId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/species/$specieId': {
      id: '/species/$specieId'
      path: '/species/$specieId'
      fullPath: '/species/$specieId'
      preLoaderRoute: typeof SpeciesSpecieIdImport
      parentRoute: typeof rootRoute
    }
    '/species/': {
      id: '/species/'
      path: '/species'
      fullPath: '/species'
      preLoaderRoute: typeof SpeciesIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/species/$specieId': typeof SpeciesSpecieIdRoute
  '/species': typeof SpeciesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/species/$specieId': typeof SpeciesSpecieIdRoute
  '/species': typeof SpeciesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/species/$specieId': typeof SpeciesSpecieIdRoute
  '/species/': typeof SpeciesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/species/$specieId' | '/species'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/species/$specieId' | '/species'
  id: '__root__' | '/' | '/species/$specieId' | '/species/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SpeciesSpecieIdRoute: typeof SpeciesSpecieIdRoute
  SpeciesIndexRoute: typeof SpeciesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SpeciesSpecieIdRoute: SpeciesSpecieIdRoute,
  SpeciesIndexRoute: SpeciesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/species/$specieId",
        "/species/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/species/$specieId": {
      "filePath": "species.$specieId.tsx"
    },
    "/species/": {
      "filePath": "species.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
